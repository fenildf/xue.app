//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof Protocol === 'undefined') {
  Protocol = {};
}
if (typeof Protocol.Message === 'undefined') {
  Protocol.Message = {};
}
Protocol.Message.PackageType = {
  'PACKAGE_NORMAL' : 0,
  'PACKAGE_PING' : 1,
  'PACKAGE_ACK' : 2
};
Protocol.Message.MessageType = {
  'PACKAGE_MSG_GROUP' : 0,
  'PACKAGE_MSG_SYS' : 1,
  'PACKAGE_MSG_POINT' : 2
};
Protocol.Message.MessageEvent = {
  'PACKAGE_MSG_ON_MESSAGE' : 0,
  'PACKAGE_MSG_ON_ISLOGIN' : 1,
  'PACKAGE_MSG_ON_ISLOGIN_RESULT' : 2,
  'PACKAGE_MSG_ON_LOGOUT' : 3,
  'PACKAGE_MSG_ON_LOGOUT_RESULT' : 4,
  'PACKAGE_MSG_ON_MSG_JOINROOM_RESULT' : 5,
  'PACKAGE_MSG_ON_MSG_EXITROOM_RESULT' : 6,
  'PACKAGE_MSG_ON_MSG_ADDGOLD_RESULT' : 7,
  'PACKAGE_MSG_ON_MSG_ADDEXP_RESULT' : 8,
  'PACKAGE_MSG_ON_MSG_ADDNOTICE_RESULT' : 9,
  'PACKAGE_MSG_ON_MSG_DISSOLVE_RESULT' : 10,
  'PACKAGE_MSG_ON_COMMON_RESULT' : 11,
  'PACKAGE_MSG_ON_KICK_RESULT' : 12,
  'PACKAGE_MSG_ON_REMOVE_RESULT' : 13,
  'PACKAGE_MSG_ON_PASS_RESULT' : 14,
  'PACKAGE_MSG_ON_BAN_RESULT' : 15,
  'PACKAGE_MSG_ON_UNBAN_RESULT' : 16,
  'PACKAGE_MSG_ON_EDITINFO_RESULT' : 17,
  'PACKAGE_MSG_ON_APPLYJOIN_RESULT' : 18,
  'PACKAGE_MSG_ON_GETLOSSMESSAGE' : 19,
  'PACKAGE_MSG_ON_GETLOSSMESSAGE_RESULT' : 20
};
Protocol.Message.ContentType = {
  'PACKAGE_MSG_CONTENT_TEXT' : 0,
  'PACKAGE_MSG_CONTENT_PICTRUE' : 1,
  'PACKAGE_MSG_CONTENT_AUDIO' : 2,
  'PACKAGE_MSG_CONTENT_SENDQUESTION' : 3
};
Protocol.Message.RoomOprationStatus = {
  'ROOM_NO_CHANGE' : 0,
  'ROOM_NEW_JOIN' : 1,
  'ROOM_UPDATE' : 2,
  'ROOM_NOT_EXISTS' : 3
};
Protocol.Message.RoomInfo = function(args) {
  this.roomId = null;
  this.roomName = null;
  this.roomSummary = null;
  this.roomPeopleNum = null;
  this.roomFirstAdministrator = null;
  this.roomIsVerify = null;
  this.roomNotice = null;
  this.roomSpaceId = null;
  this.roomIconUrl = null;
  this.roomOprationStatus = null;
  this.versionNumber = null;
  this.speakstate = null;
  this.closenews = null;
  if (args) {
    if (args.roomId !== undefined) {
      this.roomId = args.roomId;
    }
    if (args.roomName !== undefined) {
      this.roomName = args.roomName;
    }
    if (args.roomSummary !== undefined) {
      this.roomSummary = args.roomSummary;
    }
    if (args.roomPeopleNum !== undefined) {
      this.roomPeopleNum = args.roomPeopleNum;
    }
    if (args.roomFirstAdministrator !== undefined) {
      this.roomFirstAdministrator = args.roomFirstAdministrator;
    }
    if (args.roomIsVerify !== undefined) {
      this.roomIsVerify = args.roomIsVerify;
    }
    if (args.roomNotice !== undefined) {
      this.roomNotice = args.roomNotice;
    }
    if (args.roomSpaceId !== undefined) {
      this.roomSpaceId = args.roomSpaceId;
    }
    if (args.roomIconUrl !== undefined) {
      this.roomIconUrl = args.roomIconUrl;
    }
    if (args.roomOprationStatus !== undefined) {
      this.roomOprationStatus = args.roomOprationStatus;
    }
    if (args.versionNumber !== undefined) {
      this.versionNumber = args.versionNumber;
    }
    if (args.speakstate !== undefined) {
      this.speakstate = args.speakstate;
    }
    if (args.closenews !== undefined) {
      this.closenews = args.closenews;
    }
  }
};
Protocol.Message.RoomInfo.prototype = {};
Protocol.Message.RoomInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.roomId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.roomSummary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.roomPeopleNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.roomFirstAdministrator = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.roomIsVerify = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.roomNotice = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.roomSpaceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.roomIconUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.roomOprationStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.versionNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.speakstate = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.closenews = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.RoomInfo.prototype.write = function(output) {
  output.writeStructBegin('RoomInfo');
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.I32, 1);
    output.writeI32(this.roomId);
    output.writeFieldEnd();
  }
  if (this.roomName !== null && this.roomName !== undefined) {
    output.writeFieldBegin('roomName', Thrift.Type.STRING, 2);
    output.writeString(this.roomName);
    output.writeFieldEnd();
  }
  if (this.roomSummary !== null && this.roomSummary !== undefined) {
    output.writeFieldBegin('roomSummary', Thrift.Type.STRING, 3);
    output.writeString(this.roomSummary);
    output.writeFieldEnd();
  }
  if (this.roomPeopleNum !== null && this.roomPeopleNum !== undefined) {
    output.writeFieldBegin('roomPeopleNum', Thrift.Type.I32, 4);
    output.writeI32(this.roomPeopleNum);
    output.writeFieldEnd();
  }
  if (this.roomFirstAdministrator !== null && this.roomFirstAdministrator !== undefined) {
    output.writeFieldBegin('roomFirstAdministrator', Thrift.Type.STRING, 5);
    output.writeString(this.roomFirstAdministrator);
    output.writeFieldEnd();
  }
  if (this.roomIsVerify !== null && this.roomIsVerify !== undefined) {
    output.writeFieldBegin('roomIsVerify', Thrift.Type.BOOL, 6);
    output.writeBool(this.roomIsVerify);
    output.writeFieldEnd();
  }
  if (this.roomNotice !== null && this.roomNotice !== undefined) {
    output.writeFieldBegin('roomNotice', Thrift.Type.STRING, 7);
    output.writeString(this.roomNotice);
    output.writeFieldEnd();
  }
  if (this.roomSpaceId !== null && this.roomSpaceId !== undefined) {
    output.writeFieldBegin('roomSpaceId', Thrift.Type.I32, 8);
    output.writeI32(this.roomSpaceId);
    output.writeFieldEnd();
  }
  if (this.roomIconUrl !== null && this.roomIconUrl !== undefined) {
    output.writeFieldBegin('roomIconUrl', Thrift.Type.STRING, 9);
    output.writeString(this.roomIconUrl);
    output.writeFieldEnd();
  }
  if (this.roomOprationStatus !== null && this.roomOprationStatus !== undefined) {
    output.writeFieldBegin('roomOprationStatus', Thrift.Type.I32, 10);
    output.writeI32(this.roomOprationStatus);
    output.writeFieldEnd();
  }
  if (this.versionNumber !== null && this.versionNumber !== undefined) {
    output.writeFieldBegin('versionNumber', Thrift.Type.I64, 11);
    output.writeI64(this.versionNumber);
    output.writeFieldEnd();
  }
  if (this.speakstate !== null && this.speakstate !== undefined) {
    output.writeFieldBegin('speakstate', Thrift.Type.I32, 12);
    output.writeI32(this.speakstate);
    output.writeFieldEnd();
  }
  if (this.closenews !== null && this.closenews !== undefined) {
    output.writeFieldBegin('closenews', Thrift.Type.I32, 13);
    output.writeI32(this.closenews);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.JoinRoomInfos = function(args) {
  this.nickname = null;
  this.mId = null;
  this.sendTime = null;
  this.roomNum = null;
  this.content = null;
  this.username = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.roomNum !== undefined) {
      this.roomNum = args.roomNum;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
Protocol.Message.JoinRoomInfos.prototype = {};
Protocol.Message.JoinRoomInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.roomNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.JoinRoomInfos.prototype.write = function(output) {
  output.writeStructBegin('JoinRoomInfos');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 2);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 3);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.roomNum !== null && this.roomNum !== undefined) {
    output.writeFieldBegin('roomNum', Thrift.Type.I32, 4);
    output.writeI32(this.roomNum);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 5);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 6);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.ExitRoomInfos = function(args) {
  this.nickname = null;
  this.mId = null;
  this.sendTime = null;
  this.roomNum = null;
  this.username = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.roomNum !== undefined) {
      this.roomNum = args.roomNum;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.ExitRoomInfos.prototype = {};
Protocol.Message.ExitRoomInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.roomNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.ExitRoomInfos.prototype.write = function(output) {
  output.writeStructBegin('ExitRoomInfos');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 2);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 3);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.roomNum !== null && this.roomNum !== undefined) {
    output.writeFieldBegin('roomNum', Thrift.Type.I32, 4);
    output.writeI32(this.roomNum);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 5);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 6);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.AddGoldInfos = function(args) {
  this.nickname = null;
  this.mId = null;
  this.sendTime = null;
  this.roomNum = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.roomNum !== undefined) {
      this.roomNum = args.roomNum;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.AddGoldInfos.prototype = {};
Protocol.Message.AddGoldInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.roomNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.AddGoldInfos.prototype.write = function(output) {
  output.writeStructBegin('AddGoldInfos');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 2);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 3);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.roomNum !== null && this.roomNum !== undefined) {
    output.writeFieldBegin('roomNum', Thrift.Type.I32, 4);
    output.writeI32(this.roomNum);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 5);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.DissolveInfos = function(args) {
  this.nickname = null;
  this.mId = null;
  this.sendTime = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.DissolveInfos.prototype = {};
Protocol.Message.DissolveInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.DissolveInfos.prototype.write = function(output) {
  output.writeStructBegin('DissolveInfos');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 2);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 3);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 4);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.AddNoticeInfos = function(args) {
  this.nickname = null;
  this.mId = null;
  this.sendTime = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.AddNoticeInfos.prototype = {};
Protocol.Message.AddNoticeInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.AddNoticeInfos.prototype.write = function(output) {
  output.writeStructBegin('AddNoticeInfos');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 2);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 3);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 4);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.AddExpInfos = function(args) {
  this.nickname = null;
  this.mId = null;
  this.sendTime = null;
  this.roomNum = null;
  this.expuser = null;
  this.stulevel = null;
  this.levelname = null;
  this.expnum = null;
  this.nextexp = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.roomNum !== undefined) {
      this.roomNum = args.roomNum;
    }
    if (args.expuser !== undefined) {
      this.expuser = args.expuser;
    }
    if (args.stulevel !== undefined) {
      this.stulevel = args.stulevel;
    }
    if (args.levelname !== undefined) {
      this.levelname = args.levelname;
    }
    if (args.expnum !== undefined) {
      this.expnum = args.expnum;
    }
    if (args.nextexp !== undefined) {
      this.nextexp = args.nextexp;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.AddExpInfos.prototype = {};
Protocol.Message.AddExpInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.roomNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.expuser = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.stulevel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.levelname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.expnum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.nextexp = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.AddExpInfos.prototype.write = function(output) {
  output.writeStructBegin('AddExpInfos');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 2);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 3);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.roomNum !== null && this.roomNum !== undefined) {
    output.writeFieldBegin('roomNum', Thrift.Type.I32, 4);
    output.writeI32(this.roomNum);
    output.writeFieldEnd();
  }
  if (this.expuser !== null && this.expuser !== undefined) {
    output.writeFieldBegin('expuser', Thrift.Type.STRING, 5);
    output.writeString(this.expuser);
    output.writeFieldEnd();
  }
  if (this.stulevel !== null && this.stulevel !== undefined) {
    output.writeFieldBegin('stulevel', Thrift.Type.I32, 6);
    output.writeI32(this.stulevel);
    output.writeFieldEnd();
  }
  if (this.levelname !== null && this.levelname !== undefined) {
    output.writeFieldBegin('levelname', Thrift.Type.STRING, 7);
    output.writeString(this.levelname);
    output.writeFieldEnd();
  }
  if (this.expnum !== null && this.expnum !== undefined) {
    output.writeFieldBegin('expnum', Thrift.Type.I32, 8);
    output.writeI32(this.expnum);
    output.writeFieldEnd();
  }
  if (this.nextexp !== null && this.nextexp !== undefined) {
    output.writeFieldBegin('nextexp', Thrift.Type.I32, 9);
    output.writeI32(this.nextexp);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 10);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.CommonSystemMsg = function(args) {
  this.nickname = null;
  this.headimg = null;
  this.mId = null;
  this.sendTime = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.headimg !== undefined) {
      this.headimg = args.headimg;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.CommonSystemMsg.prototype = {};
Protocol.Message.CommonSystemMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headimg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.CommonSystemMsg.prototype.write = function(output) {
  output.writeStructBegin('CommonSystemMsg');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.headimg !== null && this.headimg !== undefined) {
    output.writeFieldBegin('headimg', Thrift.Type.STRING, 2);
    output.writeString(this.headimg);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 3);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 4);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 5);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.KickSystemMsg = function(args) {
  this.nickname = null;
  this.headimg = null;
  this.mId = null;
  this.sendTime = null;
  this.content = null;
  this.clientType = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.headimg !== undefined) {
      this.headimg = args.headimg;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.clientType !== undefined) {
      this.clientType = args.clientType;
    }
  }
};
Protocol.Message.KickSystemMsg.prototype = {};
Protocol.Message.KickSystemMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headimg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.clientType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.KickSystemMsg.prototype.write = function(output) {
  output.writeStructBegin('KickSystemMsg');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.headimg !== null && this.headimg !== undefined) {
    output.writeFieldBegin('headimg', Thrift.Type.STRING, 2);
    output.writeString(this.headimg);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 3);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 4);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 5);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.STRING, 6);
    output.writeString(this.clientType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.RemoveSystemMsg = function(args) {
  this.nickname = null;
  this.headimg = null;
  this.mId = null;
  this.sendTime = null;
  this.roomid = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.headimg !== undefined) {
      this.headimg = args.headimg;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.roomid !== undefined) {
      this.roomid = args.roomid;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.RemoveSystemMsg.prototype = {};
Protocol.Message.RemoveSystemMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headimg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.roomid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.RemoveSystemMsg.prototype.write = function(output) {
  output.writeStructBegin('RemoveSystemMsg');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.headimg !== null && this.headimg !== undefined) {
    output.writeFieldBegin('headimg', Thrift.Type.STRING, 2);
    output.writeString(this.headimg);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 3);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 4);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.roomid !== null && this.roomid !== undefined) {
    output.writeFieldBegin('roomid', Thrift.Type.STRING, 5);
    output.writeString(this.roomid);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 6);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.PassSystemMsg = function(args) {
  this.nickname = null;
  this.headimg = null;
  this.mId = null;
  this.sendTime = null;
  this.roomid = null;
  this.content = null;
  this.roomInfo = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.headimg !== undefined) {
      this.headimg = args.headimg;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.roomid !== undefined) {
      this.roomid = args.roomid;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.roomInfo !== undefined) {
      this.roomInfo = args.roomInfo;
    }
  }
};
Protocol.Message.PassSystemMsg.prototype = {};
Protocol.Message.PassSystemMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headimg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.roomid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.roomInfo = new Protocol.Message.RoomInfo();
        this.roomInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.PassSystemMsg.prototype.write = function(output) {
  output.writeStructBegin('PassSystemMsg');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.headimg !== null && this.headimg !== undefined) {
    output.writeFieldBegin('headimg', Thrift.Type.STRING, 2);
    output.writeString(this.headimg);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 3);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 4);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.roomid !== null && this.roomid !== undefined) {
    output.writeFieldBegin('roomid', Thrift.Type.STRING, 5);
    output.writeString(this.roomid);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 6);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.roomInfo !== null && this.roomInfo !== undefined) {
    output.writeFieldBegin('roomInfo', Thrift.Type.STRUCT, 7);
    this.roomInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.BanSystemMsg = function(args) {
  this.nickname = null;
  this.headimg = null;
  this.mId = null;
  this.sendTime = null;
  this.roomid = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.headimg !== undefined) {
      this.headimg = args.headimg;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.roomid !== undefined) {
      this.roomid = args.roomid;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.BanSystemMsg.prototype = {};
Protocol.Message.BanSystemMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headimg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.roomid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.BanSystemMsg.prototype.write = function(output) {
  output.writeStructBegin('BanSystemMsg');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.headimg !== null && this.headimg !== undefined) {
    output.writeFieldBegin('headimg', Thrift.Type.STRING, 2);
    output.writeString(this.headimg);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 3);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 4);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.roomid !== null && this.roomid !== undefined) {
    output.writeFieldBegin('roomid', Thrift.Type.STRING, 5);
    output.writeString(this.roomid);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 6);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.UnbanSystemMsg = function(args) {
  this.nickname = null;
  this.headimg = null;
  this.mId = null;
  this.sendTime = null;
  this.roomid = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.headimg !== undefined) {
      this.headimg = args.headimg;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.roomid !== undefined) {
      this.roomid = args.roomid;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.UnbanSystemMsg.prototype = {};
Protocol.Message.UnbanSystemMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headimg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.roomid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.UnbanSystemMsg.prototype.write = function(output) {
  output.writeStructBegin('UnbanSystemMsg');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.headimg !== null && this.headimg !== undefined) {
    output.writeFieldBegin('headimg', Thrift.Type.STRING, 2);
    output.writeString(this.headimg);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 3);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 4);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.roomid !== null && this.roomid !== undefined) {
    output.writeFieldBegin('roomid', Thrift.Type.STRING, 5);
    output.writeString(this.roomid);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 6);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.EditInfoSystemMsg = function(args) {
  this.nickname = null;
  this.headimg = null;
  this.mId = null;
  this.sendTime = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.headimg !== undefined) {
      this.headimg = args.headimg;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.EditInfoSystemMsg.prototype = {};
Protocol.Message.EditInfoSystemMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headimg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.EditInfoSystemMsg.prototype.write = function(output) {
  output.writeStructBegin('EditInfoSystemMsg');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.headimg !== null && this.headimg !== undefined) {
    output.writeFieldBegin('headimg', Thrift.Type.STRING, 2);
    output.writeString(this.headimg);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 3);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 4);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 5);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.ApplyJoinSystemMsg = function(args) {
  this.nickname = null;
  this.headimg = null;
  this.mId = null;
  this.sendTime = null;
  this.content = null;
  if (args) {
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
    if (args.headimg !== undefined) {
      this.headimg = args.headimg;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.ApplyJoinSystemMsg.prototype = {};
Protocol.Message.ApplyJoinSystemMsg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headimg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.ApplyJoinSystemMsg.prototype.write = function(output) {
  output.writeStructBegin('ApplyJoinSystemMsg');
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 1);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.headimg !== null && this.headimg !== undefined) {
    output.writeFieldBegin('headimg', Thrift.Type.STRING, 2);
    output.writeString(this.headimg);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 3);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 4);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 5);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.UserInfos = function(args) {
  this.lastLoginTime = null;
  this.cityname = null;
  this.type = null;
  this.grade = null;
  this.speakstate = null;
  this.date = null;
  this.pushtime = null;
  this.mobile = null;
  this.token = null;
  this.pushno = null;
  this.clientid = null;
  this.himgbig = null;
  this.stuId = null;
  this.versionNumber = null;
  this.gradename = null;
  this.himg = null;
  this.pushcnt = null;
  this.sex = null;
  this.areaname = null;
  this.pushtotalcnt = null;
  this.area = null;
  this.isInit = null;
  this.mail = null;
  this.clientType = null;
  this.city = null;
  this.appname = null;
  this.nickname = null;
  if (args) {
    if (args.lastLoginTime !== undefined) {
      this.lastLoginTime = args.lastLoginTime;
    }
    if (args.cityname !== undefined) {
      this.cityname = args.cityname;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.grade !== undefined) {
      this.grade = args.grade;
    }
    if (args.speakstate !== undefined) {
      this.speakstate = args.speakstate;
    }
    if (args.date !== undefined) {
      this.date = args.date;
    }
    if (args.pushtime !== undefined) {
      this.pushtime = args.pushtime;
    }
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.pushno !== undefined) {
      this.pushno = args.pushno;
    }
    if (args.clientid !== undefined) {
      this.clientid = args.clientid;
    }
    if (args.himgbig !== undefined) {
      this.himgbig = args.himgbig;
    }
    if (args.stuId !== undefined) {
      this.stuId = args.stuId;
    }
    if (args.versionNumber !== undefined) {
      this.versionNumber = args.versionNumber;
    }
    if (args.gradename !== undefined) {
      this.gradename = args.gradename;
    }
    if (args.himg !== undefined) {
      this.himg = args.himg;
    }
    if (args.pushcnt !== undefined) {
      this.pushcnt = args.pushcnt;
    }
    if (args.sex !== undefined) {
      this.sex = args.sex;
    }
    if (args.areaname !== undefined) {
      this.areaname = args.areaname;
    }
    if (args.pushtotalcnt !== undefined) {
      this.pushtotalcnt = args.pushtotalcnt;
    }
    if (args.area !== undefined) {
      this.area = args.area;
    }
    if (args.isInit !== undefined) {
      this.isInit = args.isInit;
    }
    if (args.mail !== undefined) {
      this.mail = args.mail;
    }
    if (args.clientType !== undefined) {
      this.clientType = args.clientType;
    }
    if (args.city !== undefined) {
      this.city = args.city;
    }
    if (args.appname !== undefined) {
      this.appname = args.appname;
    }
    if (args.nickname !== undefined) {
      this.nickname = args.nickname;
    }
  }
};
Protocol.Message.UserInfos.prototype = {};
Protocol.Message.UserInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.lastLoginTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cityname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.grade = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.speakstate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.pushtime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.pushno = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.clientid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.himgbig = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.stuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I64) {
        this.versionNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.gradename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.himg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.pushcnt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRING) {
        this.sex = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.areaname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRING) {
        this.pushtotalcnt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRING) {
        this.area = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRING) {
        this.isInit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRING) {
        this.mail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.STRING) {
        this.clientType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 49:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.STRING) {
        this.appname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.UserInfos.prototype.write = function(output) {
  output.writeStructBegin('UserInfos');
  if (this.lastLoginTime !== null && this.lastLoginTime !== undefined) {
    output.writeFieldBegin('lastLoginTime', Thrift.Type.STRING, 1);
    output.writeString(this.lastLoginTime);
    output.writeFieldEnd();
  }
  if (this.cityname !== null && this.cityname !== undefined) {
    output.writeFieldBegin('cityname', Thrift.Type.STRING, 3);
    output.writeString(this.cityname);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.grade !== null && this.grade !== undefined) {
    output.writeFieldBegin('grade', Thrift.Type.STRING, 7);
    output.writeString(this.grade);
    output.writeFieldEnd();
  }
  if (this.speakstate !== null && this.speakstate !== undefined) {
    output.writeFieldBegin('speakstate', Thrift.Type.STRING, 9);
    output.writeString(this.speakstate);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 11);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.pushtime !== null && this.pushtime !== undefined) {
    output.writeFieldBegin('pushtime', Thrift.Type.STRING, 13);
    output.writeString(this.pushtime);
    output.writeFieldEnd();
  }
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 15);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 17);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.pushno !== null && this.pushno !== undefined) {
    output.writeFieldBegin('pushno', Thrift.Type.STRING, 19);
    output.writeString(this.pushno);
    output.writeFieldEnd();
  }
  if (this.clientid !== null && this.clientid !== undefined) {
    output.writeFieldBegin('clientid', Thrift.Type.STRING, 21);
    output.writeString(this.clientid);
    output.writeFieldEnd();
  }
  if (this.himgbig !== null && this.himgbig !== undefined) {
    output.writeFieldBegin('himgbig', Thrift.Type.STRING, 23);
    output.writeString(this.himgbig);
    output.writeFieldEnd();
  }
  if (this.stuId !== null && this.stuId !== undefined) {
    output.writeFieldBegin('stuId', Thrift.Type.STRING, 25);
    output.writeString(this.stuId);
    output.writeFieldEnd();
  }
  if (this.versionNumber !== null && this.versionNumber !== undefined) {
    output.writeFieldBegin('versionNumber', Thrift.Type.I64, 27);
    output.writeI64(this.versionNumber);
    output.writeFieldEnd();
  }
  if (this.gradename !== null && this.gradename !== undefined) {
    output.writeFieldBegin('gradename', Thrift.Type.STRING, 29);
    output.writeString(this.gradename);
    output.writeFieldEnd();
  }
  if (this.himg !== null && this.himg !== undefined) {
    output.writeFieldBegin('himg', Thrift.Type.STRING, 31);
    output.writeString(this.himg);
    output.writeFieldEnd();
  }
  if (this.pushcnt !== null && this.pushcnt !== undefined) {
    output.writeFieldBegin('pushcnt', Thrift.Type.STRING, 33);
    output.writeString(this.pushcnt);
    output.writeFieldEnd();
  }
  if (this.sex !== null && this.sex !== undefined) {
    output.writeFieldBegin('sex', Thrift.Type.STRING, 35);
    output.writeString(this.sex);
    output.writeFieldEnd();
  }
  if (this.areaname !== null && this.areaname !== undefined) {
    output.writeFieldBegin('areaname', Thrift.Type.STRING, 37);
    output.writeString(this.areaname);
    output.writeFieldEnd();
  }
  if (this.pushtotalcnt !== null && this.pushtotalcnt !== undefined) {
    output.writeFieldBegin('pushtotalcnt', Thrift.Type.STRING, 39);
    output.writeString(this.pushtotalcnt);
    output.writeFieldEnd();
  }
  if (this.area !== null && this.area !== undefined) {
    output.writeFieldBegin('area', Thrift.Type.STRING, 41);
    output.writeString(this.area);
    output.writeFieldEnd();
  }
  if (this.isInit !== null && this.isInit !== undefined) {
    output.writeFieldBegin('isInit', Thrift.Type.STRING, 43);
    output.writeString(this.isInit);
    output.writeFieldEnd();
  }
  if (this.mail !== null && this.mail !== undefined) {
    output.writeFieldBegin('mail', Thrift.Type.STRING, 45);
    output.writeString(this.mail);
    output.writeFieldEnd();
  }
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.STRING, 47);
    output.writeString(this.clientType);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 49);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.appname !== null && this.appname !== undefined) {
    output.writeFieldBegin('appname', Thrift.Type.STRING, 51);
    output.writeString(this.appname);
    output.writeFieldEnd();
  }
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 53);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.ReturnResult = function(args) {
  this.status = null;
  this.reason = null;
  this.versionNumber = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
    if (args.versionNumber !== undefined) {
      this.versionNumber = args.versionNumber;
    }
  }
};
Protocol.Message.ReturnResult.prototype = {};
Protocol.Message.ReturnResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.versionNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.ReturnResult.prototype.write = function(output) {
  output.writeStructBegin('ReturnResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 1);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.versionNumber !== null && this.versionNumber !== undefined) {
    output.writeFieldBegin('versionNumber', Thrift.Type.I64, 3);
    output.writeI64(this.versionNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.TextMessage = function(args) {
  this.nickName = null;
  this.headImg = null;
  this.levelName = null;
  this.content = null;
  if (args) {
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.headImg !== undefined) {
      this.headImg = args.headImg;
    }
    if (args.levelName !== undefined) {
      this.levelName = args.levelName;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Protocol.Message.TextMessage.prototype = {};
Protocol.Message.TextMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headImg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.levelName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.TextMessage.prototype.write = function(output) {
  output.writeStructBegin('TextMessage');
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 1);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.headImg !== null && this.headImg !== undefined) {
    output.writeFieldBegin('headImg', Thrift.Type.STRING, 2);
    output.writeString(this.headImg);
    output.writeFieldEnd();
  }
  if (this.levelName !== null && this.levelName !== undefined) {
    output.writeFieldBegin('levelName', Thrift.Type.STRING, 3);
    output.writeString(this.levelName);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 4);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.ImageMessage = function(args) {
  this.nickName = null;
  this.headImg = null;
  this.levelName = null;
  this.bigImageUrl = null;
  this.smallImageUrl = null;
  if (args) {
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.headImg !== undefined) {
      this.headImg = args.headImg;
    }
    if (args.levelName !== undefined) {
      this.levelName = args.levelName;
    }
    if (args.bigImageUrl !== undefined) {
      this.bigImageUrl = args.bigImageUrl;
    }
    if (args.smallImageUrl !== undefined) {
      this.smallImageUrl = args.smallImageUrl;
    }
  }
};
Protocol.Message.ImageMessage.prototype = {};
Protocol.Message.ImageMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headImg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.levelName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.bigImageUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.smallImageUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.ImageMessage.prototype.write = function(output) {
  output.writeStructBegin('ImageMessage');
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 1);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.headImg !== null && this.headImg !== undefined) {
    output.writeFieldBegin('headImg', Thrift.Type.STRING, 2);
    output.writeString(this.headImg);
    output.writeFieldEnd();
  }
  if (this.levelName !== null && this.levelName !== undefined) {
    output.writeFieldBegin('levelName', Thrift.Type.STRING, 3);
    output.writeString(this.levelName);
    output.writeFieldEnd();
  }
  if (this.bigImageUrl !== null && this.bigImageUrl !== undefined) {
    output.writeFieldBegin('bigImageUrl', Thrift.Type.STRING, 4);
    output.writeString(this.bigImageUrl);
    output.writeFieldEnd();
  }
  if (this.smallImageUrl !== null && this.smallImageUrl !== undefined) {
    output.writeFieldBegin('smallImageUrl', Thrift.Type.STRING, 5);
    output.writeString(this.smallImageUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.AudioMessage = function(args) {
  this.nickName = null;
  this.headImg = null;
  this.levelName = null;
  this.audioUrl = null;
  this.duration = null;
  if (args) {
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.headImg !== undefined) {
      this.headImg = args.headImg;
    }
    if (args.levelName !== undefined) {
      this.levelName = args.levelName;
    }
    if (args.audioUrl !== undefined) {
      this.audioUrl = args.audioUrl;
    }
    if (args.duration !== undefined) {
      this.duration = args.duration;
    }
  }
};
Protocol.Message.AudioMessage.prototype = {};
Protocol.Message.AudioMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headImg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.levelName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.audioUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.duration = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.AudioMessage.prototype.write = function(output) {
  output.writeStructBegin('AudioMessage');
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 1);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.headImg !== null && this.headImg !== undefined) {
    output.writeFieldBegin('headImg', Thrift.Type.STRING, 2);
    output.writeString(this.headImg);
    output.writeFieldEnd();
  }
  if (this.levelName !== null && this.levelName !== undefined) {
    output.writeFieldBegin('levelName', Thrift.Type.STRING, 3);
    output.writeString(this.levelName);
    output.writeFieldEnd();
  }
  if (this.audioUrl !== null && this.audioUrl !== undefined) {
    output.writeFieldBegin('audioUrl', Thrift.Type.STRING, 4);
    output.writeString(this.audioUrl);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.STRING, 5);
    output.writeString(this.duration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.SendQuestionMessage = function(args) {
  this.uid = null;
  this.nickName = null;
  this.headImg = null;
  this.ln = null;
  this.mId = null;
  this.sendTime = null;
  this.imgs = null;
  this.url = null;
  this.title = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.headImg !== undefined) {
      this.headImg = args.headImg;
    }
    if (args.ln !== undefined) {
      this.ln = args.ln;
    }
    if (args.mId !== undefined) {
      this.mId = args.mId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.imgs !== undefined) {
      this.imgs = args.imgs;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
  }
};
Protocol.Message.SendQuestionMessage.prototype = {};
Protocol.Message.SendQuestionMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.headImg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ln = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.mId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.imgs = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.SendQuestionMessage.prototype.write = function(output) {
  output.writeStructBegin('SendQuestionMessage');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 2);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.headImg !== null && this.headImg !== undefined) {
    output.writeFieldBegin('headImg', Thrift.Type.STRING, 3);
    output.writeString(this.headImg);
    output.writeFieldEnd();
  }
  if (this.ln !== null && this.ln !== undefined) {
    output.writeFieldBegin('ln', Thrift.Type.STRING, 4);
    output.writeString(this.ln);
    output.writeFieldEnd();
  }
  if (this.mId !== null && this.mId !== undefined) {
    output.writeFieldBegin('mId', Thrift.Type.I32, 5);
    output.writeI32(this.mId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 6);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.imgs !== null && this.imgs !== undefined) {
    output.writeFieldBegin('imgs', Thrift.Type.STRING, 7);
    output.writeString(this.imgs);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 8);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 9);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.MessageHistory = function(args) {
  this.messageEvent = 0;
  this.contentType = 0;
  this.sendTime = null;
  this.roomId = null;
  this.versionNumber = null;
  this.fromId = null;
  this.textMessageBody = null;
  this.imageMessageBody = null;
  this.audioMessageBody = null;
  this.sendQuestionMessageBody = null;
  this.deviceSource = null;
  if (args) {
    if (args.messageEvent !== undefined) {
      this.messageEvent = args.messageEvent;
    }
    if (args.contentType !== undefined) {
      this.contentType = args.contentType;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.roomId !== undefined) {
      this.roomId = args.roomId;
    }
    if (args.versionNumber !== undefined) {
      this.versionNumber = args.versionNumber;
    }
    if (args.fromId !== undefined) {
      this.fromId = args.fromId;
    }
    if (args.textMessageBody !== undefined) {
      this.textMessageBody = args.textMessageBody;
    }
    if (args.imageMessageBody !== undefined) {
      this.imageMessageBody = args.imageMessageBody;
    }
    if (args.audioMessageBody !== undefined) {
      this.audioMessageBody = args.audioMessageBody;
    }
    if (args.sendQuestionMessageBody !== undefined) {
      this.sendQuestionMessageBody = args.sendQuestionMessageBody;
    }
    if (args.deviceSource !== undefined) {
      this.deviceSource = args.deviceSource;
    }
  }
};
Protocol.Message.MessageHistory.prototype = {};
Protocol.Message.MessageHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.messageEvent = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.versionNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.fromId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.textMessageBody = new Protocol.Message.TextMessage();
        this.textMessageBody.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.imageMessageBody = new Protocol.Message.ImageMessage();
        this.imageMessageBody.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioMessageBody = new Protocol.Message.AudioMessage();
        this.audioMessageBody.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendQuestionMessageBody = new Protocol.Message.SendQuestionMessage();
        this.sendQuestionMessageBody.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.deviceSource = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.MessageHistory.prototype.write = function(output) {
  output.writeStructBegin('MessageHistory');
  if (this.messageEvent !== null && this.messageEvent !== undefined) {
    output.writeFieldBegin('messageEvent', Thrift.Type.I32, 1);
    output.writeI32(this.messageEvent);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 2);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 3);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 4);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  if (this.versionNumber !== null && this.versionNumber !== undefined) {
    output.writeFieldBegin('versionNumber', Thrift.Type.I64, 5);
    output.writeI64(this.versionNumber);
    output.writeFieldEnd();
  }
  if (this.fromId !== null && this.fromId !== undefined) {
    output.writeFieldBegin('fromId', Thrift.Type.STRING, 6);
    output.writeString(this.fromId);
    output.writeFieldEnd();
  }
  if (this.textMessageBody !== null && this.textMessageBody !== undefined) {
    output.writeFieldBegin('textMessageBody', Thrift.Type.STRUCT, 7);
    this.textMessageBody.write(output);
    output.writeFieldEnd();
  }
  if (this.imageMessageBody !== null && this.imageMessageBody !== undefined) {
    output.writeFieldBegin('imageMessageBody', Thrift.Type.STRUCT, 8);
    this.imageMessageBody.write(output);
    output.writeFieldEnd();
  }
  if (this.audioMessageBody !== null && this.audioMessageBody !== undefined) {
    output.writeFieldBegin('audioMessageBody', Thrift.Type.STRUCT, 9);
    this.audioMessageBody.write(output);
    output.writeFieldEnd();
  }
  if (this.sendQuestionMessageBody !== null && this.sendQuestionMessageBody !== undefined) {
    output.writeFieldBegin('sendQuestionMessageBody', Thrift.Type.STRUCT, 10);
    this.sendQuestionMessageBody.write(output);
    output.writeFieldEnd();
  }
  if (this.deviceSource !== null && this.deviceSource !== undefined) {
    output.writeFieldBegin('deviceSource', Thrift.Type.STRING, 11);
    output.writeString(this.deviceSource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.SystemMessageHistory = function(args) {
  this.messageType = null;
  this.sendTime = null;
  this.messageBody = null;
  if (args) {
    if (args.messageType !== undefined) {
      this.messageType = args.messageType;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.messageBody !== undefined) {
      this.messageBody = args.messageBody;
    }
  }
};
Protocol.Message.SystemMessageHistory.prototype = {};
Protocol.Message.SystemMessageHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageBody = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.SystemMessageHistory.prototype.write = function(output) {
  output.writeStructBegin('SystemMessageHistory');
  if (this.messageType !== null && this.messageType !== undefined) {
    output.writeFieldBegin('messageType', Thrift.Type.STRING, 1);
    output.writeString(this.messageType);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 2);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.messageBody !== null && this.messageBody !== undefined) {
    output.writeFieldBegin('messageBody', Thrift.Type.STRING, 3);
    output.writeString(this.messageBody);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.Message = function(args) {
  this.packageType = 0;
  this.messageType = 0;
  this.messageEvent = 0;
  this.contentType = 0;
  this.sessionId = null;
  this.fromId = null;
  this.versionNumber = null;
  this.roomId = null;
  this.sendTime = null;
  this.textMessageBody = null;
  this.imageMessageBody = null;
  this.audioMessageBody = null;
  this.sendQuestionMessageBody = null;
  this.returnResult = null;
  this.userInfos = null;
  this.roomVersions = null;
  this.roomLastMsgId = null;
  this.roomInfoOfTop = null;
  this.roomListsOfAlreadyJoin = null;
  this.roomListsOfCanJoin = null;
  this.msgLists = null;
  this.userListOfSystem = null;
  this.systemMessageList = null;
  this.lastRecvTimeOfSystemMessage = null;
  this.joinRoomInfos = null;
  this.exitRoomInfos = null;
  this.addGoldInfos = null;
  this.addExpInfos = null;
  this.addNoticeInfos = null;
  this.dissolveInfos = null;
  this.commonSystemMsg = null;
  this.kickSystemMsg = null;
  this.removeSystemMsg = null;
  this.passSystemMsg = null;
  this.banSystemMsg = null;
  this.unbanSystemMsg = null;
  this.editInfoSystemMsg = null;
  this.applyJoinSystemMsg = null;
  this.deviceSource = null;
  this.lossMessageVersion = null;
  this.canjoinVersions = null;
  if (args) {
    if (args.packageType !== undefined) {
      this.packageType = args.packageType;
    }
    if (args.messageType !== undefined) {
      this.messageType = args.messageType;
    }
    if (args.messageEvent !== undefined) {
      this.messageEvent = args.messageEvent;
    }
    if (args.contentType !== undefined) {
      this.contentType = args.contentType;
    }
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.fromId !== undefined) {
      this.fromId = args.fromId;
    }
    if (args.versionNumber !== undefined) {
      this.versionNumber = args.versionNumber;
    }
    if (args.roomId !== undefined) {
      this.roomId = args.roomId;
    }
    if (args.sendTime !== undefined) {
      this.sendTime = args.sendTime;
    }
    if (args.textMessageBody !== undefined) {
      this.textMessageBody = args.textMessageBody;
    }
    if (args.imageMessageBody !== undefined) {
      this.imageMessageBody = args.imageMessageBody;
    }
    if (args.audioMessageBody !== undefined) {
      this.audioMessageBody = args.audioMessageBody;
    }
    if (args.sendQuestionMessageBody !== undefined) {
      this.sendQuestionMessageBody = args.sendQuestionMessageBody;
    }
    if (args.returnResult !== undefined) {
      this.returnResult = args.returnResult;
    }
    if (args.userInfos !== undefined) {
      this.userInfos = args.userInfos;
    }
    if (args.roomVersions !== undefined) {
      this.roomVersions = args.roomVersions;
    }
    if (args.roomLastMsgId !== undefined) {
      this.roomLastMsgId = args.roomLastMsgId;
    }
    if (args.roomInfoOfTop !== undefined) {
      this.roomInfoOfTop = args.roomInfoOfTop;
    }
    if (args.roomListsOfAlreadyJoin !== undefined) {
      this.roomListsOfAlreadyJoin = args.roomListsOfAlreadyJoin;
    }
    if (args.roomListsOfCanJoin !== undefined) {
      this.roomListsOfCanJoin = args.roomListsOfCanJoin;
    }
    if (args.msgLists !== undefined) {
      this.msgLists = args.msgLists;
    }
    if (args.userListOfSystem !== undefined) {
      this.userListOfSystem = args.userListOfSystem;
    }
    if (args.systemMessageList !== undefined) {
      this.systemMessageList = args.systemMessageList;
    }
    if (args.lastRecvTimeOfSystemMessage !== undefined) {
      this.lastRecvTimeOfSystemMessage = args.lastRecvTimeOfSystemMessage;
    }
    if (args.joinRoomInfos !== undefined) {
      this.joinRoomInfos = args.joinRoomInfos;
    }
    if (args.exitRoomInfos !== undefined) {
      this.exitRoomInfos = args.exitRoomInfos;
    }
    if (args.addGoldInfos !== undefined) {
      this.addGoldInfos = args.addGoldInfos;
    }
    if (args.addExpInfos !== undefined) {
      this.addExpInfos = args.addExpInfos;
    }
    if (args.addNoticeInfos !== undefined) {
      this.addNoticeInfos = args.addNoticeInfos;
    }
    if (args.dissolveInfos !== undefined) {
      this.dissolveInfos = args.dissolveInfos;
    }
    if (args.commonSystemMsg !== undefined) {
      this.commonSystemMsg = args.commonSystemMsg;
    }
    if (args.kickSystemMsg !== undefined) {
      this.kickSystemMsg = args.kickSystemMsg;
    }
    if (args.removeSystemMsg !== undefined) {
      this.removeSystemMsg = args.removeSystemMsg;
    }
    if (args.passSystemMsg !== undefined) {
      this.passSystemMsg = args.passSystemMsg;
    }
    if (args.banSystemMsg !== undefined) {
      this.banSystemMsg = args.banSystemMsg;
    }
    if (args.unbanSystemMsg !== undefined) {
      this.unbanSystemMsg = args.unbanSystemMsg;
    }
    if (args.editInfoSystemMsg !== undefined) {
      this.editInfoSystemMsg = args.editInfoSystemMsg;
    }
    if (args.applyJoinSystemMsg !== undefined) {
      this.applyJoinSystemMsg = args.applyJoinSystemMsg;
    }
    if (args.deviceSource !== undefined) {
      this.deviceSource = args.deviceSource;
    }
    if (args.lossMessageVersion !== undefined) {
      this.lossMessageVersion = args.lossMessageVersion;
    }
    if (args.canjoinVersions !== undefined) {
      this.canjoinVersions = args.canjoinVersions;
    }
  }
};
Protocol.Message.Message.prototype = {};
Protocol.Message.Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.packageType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.messageType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.messageEvent = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.fromId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.versionNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.roomId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sendTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.textMessageBody = new Protocol.Message.TextMessage();
        this.textMessageBody.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.imageMessageBody = new Protocol.Message.ImageMessage();
        this.imageMessageBody.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioMessageBody = new Protocol.Message.AudioMessage();
        this.audioMessageBody.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendQuestionMessageBody = new Protocol.Message.SendQuestionMessage();
        this.sendQuestionMessageBody.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.returnResult = new Protocol.Message.ReturnResult();
        this.returnResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.userInfos = new Protocol.Message.UserInfos();
        this.userInfos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.roomVersions = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readI64().value;
          this.roomVersions[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.roomLastMsgId = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          val15 = input.readI64().value;
          this.roomLastMsgId[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.roomInfoOfTop = new Protocol.Message.RoomInfo();
        this.roomInfoOfTop.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.roomListsOfAlreadyJoin = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          if (_i21 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key22 = null;
          var val23 = null;
          key22 = input.readString().value;
          val23 = new Protocol.Message.RoomInfo();
          val23.read(input);
          this.roomListsOfAlreadyJoin[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.roomListsOfCanJoin = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          if (_i29 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key30 = null;
          var val31 = null;
          key30 = input.readString().value;
          val31 = new Protocol.Message.RoomInfo();
          val31.read(input);
          this.roomListsOfCanJoin[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.msgLists = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Protocol.Message.MessageHistory();
          elem38.read(input);
          this.msgLists.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.userListOfSystem = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readString().value;
          this.userListOfSystem.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.systemMessageList = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new Protocol.Message.SystemMessageHistory();
          elem52.read(input);
          this.systemMessageList.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.lastRecvTimeOfSystemMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinRoomInfos = new Protocol.Message.JoinRoomInfos();
        this.joinRoomInfos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.exitRoomInfos = new Protocol.Message.ExitRoomInfos();
        this.exitRoomInfos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.addGoldInfos = new Protocol.Message.AddGoldInfos();
        this.addGoldInfos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.addExpInfos = new Protocol.Message.AddExpInfos();
        this.addExpInfos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.addNoticeInfos = new Protocol.Message.AddNoticeInfos();
        this.addNoticeInfos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.dissolveInfos = new Protocol.Message.DissolveInfos();
        this.dissolveInfos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.commonSystemMsg = new Protocol.Message.CommonSystemMsg();
        this.commonSystemMsg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.kickSystemMsg = new Protocol.Message.KickSystemMsg();
        this.kickSystemMsg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeSystemMsg = new Protocol.Message.RemoveSystemMsg();
        this.removeSystemMsg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRUCT) {
        this.passSystemMsg = new Protocol.Message.PassSystemMsg();
        this.passSystemMsg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.banSystemMsg = new Protocol.Message.BanSystemMsg();
        this.banSystemMsg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRUCT) {
        this.unbanSystemMsg = new Protocol.Message.UnbanSystemMsg();
        this.unbanSystemMsg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRUCT) {
        this.editInfoSystemMsg = new Protocol.Message.EditInfoSystemMsg();
        this.editInfoSystemMsg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRUCT) {
        this.applyJoinSystemMsg = new Protocol.Message.ApplyJoinSystemMsg();
        this.applyJoinSystemMsg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRING) {
        this.deviceSource = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.lossMessageVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.MAP) {
        var _size53 = 0;
        var _rtmp357;
        this.canjoinVersions = {};
        var _ktype54 = 0;
        var _vtype55 = 0;
        _rtmp357 = input.readMapBegin();
        _ktype54 = _rtmp357.ktype;
        _vtype55 = _rtmp357.vtype;
        _size53 = _rtmp357.size;
        for (var _i58 = 0; _i58 < _size53; ++_i58)
        {
          if (_i58 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key59 = null;
          var val60 = null;
          key59 = input.readString().value;
          val60 = input.readI64().value;
          this.canjoinVersions[key59] = val60;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Protocol.Message.Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.packageType !== null && this.packageType !== undefined) {
    output.writeFieldBegin('packageType', Thrift.Type.I32, 1);
    output.writeI32(this.packageType);
    output.writeFieldEnd();
  }
  if (this.messageType !== null && this.messageType !== undefined) {
    output.writeFieldBegin('messageType', Thrift.Type.I32, 2);
    output.writeI32(this.messageType);
    output.writeFieldEnd();
  }
  if (this.messageEvent !== null && this.messageEvent !== undefined) {
    output.writeFieldBegin('messageEvent', Thrift.Type.I32, 3);
    output.writeI32(this.messageEvent);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 4);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 5);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.fromId !== null && this.fromId !== undefined) {
    output.writeFieldBegin('fromId', Thrift.Type.STRING, 6);
    output.writeString(this.fromId);
    output.writeFieldEnd();
  }
  if (this.versionNumber !== null && this.versionNumber !== undefined) {
    output.writeFieldBegin('versionNumber', Thrift.Type.I64, 7);
    output.writeI64(this.versionNumber);
    output.writeFieldEnd();
  }
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.I32, 8);
    output.writeI32(this.roomId);
    output.writeFieldEnd();
  }
  if (this.sendTime !== null && this.sendTime !== undefined) {
    output.writeFieldBegin('sendTime', Thrift.Type.STRING, 9);
    output.writeString(this.sendTime);
    output.writeFieldEnd();
  }
  if (this.textMessageBody !== null && this.textMessageBody !== undefined) {
    output.writeFieldBegin('textMessageBody', Thrift.Type.STRUCT, 10);
    this.textMessageBody.write(output);
    output.writeFieldEnd();
  }
  if (this.imageMessageBody !== null && this.imageMessageBody !== undefined) {
    output.writeFieldBegin('imageMessageBody', Thrift.Type.STRUCT, 11);
    this.imageMessageBody.write(output);
    output.writeFieldEnd();
  }
  if (this.audioMessageBody !== null && this.audioMessageBody !== undefined) {
    output.writeFieldBegin('audioMessageBody', Thrift.Type.STRUCT, 12);
    this.audioMessageBody.write(output);
    output.writeFieldEnd();
  }
  if (this.sendQuestionMessageBody !== null && this.sendQuestionMessageBody !== undefined) {
    output.writeFieldBegin('sendQuestionMessageBody', Thrift.Type.STRUCT, 13);
    this.sendQuestionMessageBody.write(output);
    output.writeFieldEnd();
  }
  if (this.returnResult !== null && this.returnResult !== undefined) {
    output.writeFieldBegin('returnResult', Thrift.Type.STRUCT, 14);
    this.returnResult.write(output);
    output.writeFieldEnd();
  }
  if (this.userInfos !== null && this.userInfos !== undefined) {
    output.writeFieldBegin('userInfos', Thrift.Type.STRUCT, 15);
    this.userInfos.write(output);
    output.writeFieldEnd();
  }
  if (this.roomVersions !== null && this.roomVersions !== undefined) {
    output.writeFieldBegin('roomVersions', Thrift.Type.MAP, 16);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.roomVersions));
    for (var kiter61 in this.roomVersions)
    {
      if (this.roomVersions.hasOwnProperty(kiter61))
      {
        var viter62 = this.roomVersions[kiter61];
        output.writeString(kiter61);
        output.writeI64(viter62);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.roomLastMsgId !== null && this.roomLastMsgId !== undefined) {
    output.writeFieldBegin('roomLastMsgId', Thrift.Type.MAP, 17);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.roomLastMsgId));
    for (var kiter63 in this.roomLastMsgId)
    {
      if (this.roomLastMsgId.hasOwnProperty(kiter63))
      {
        var viter64 = this.roomLastMsgId[kiter63];
        output.writeString(kiter63);
        output.writeI64(viter64);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.roomInfoOfTop !== null && this.roomInfoOfTop !== undefined) {
    output.writeFieldBegin('roomInfoOfTop', Thrift.Type.STRUCT, 18);
    this.roomInfoOfTop.write(output);
    output.writeFieldEnd();
  }
  if (this.roomListsOfAlreadyJoin !== null && this.roomListsOfAlreadyJoin !== undefined) {
    output.writeFieldBegin('roomListsOfAlreadyJoin', Thrift.Type.MAP, 19);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.roomListsOfAlreadyJoin));
    for (var kiter65 in this.roomListsOfAlreadyJoin)
    {
      if (this.roomListsOfAlreadyJoin.hasOwnProperty(kiter65))
      {
        var viter66 = this.roomListsOfAlreadyJoin[kiter65];
        output.writeString(kiter65);
        viter66.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.roomListsOfCanJoin !== null && this.roomListsOfCanJoin !== undefined) {
    output.writeFieldBegin('roomListsOfCanJoin', Thrift.Type.MAP, 20);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.roomListsOfCanJoin));
    for (var kiter67 in this.roomListsOfCanJoin)
    {
      if (this.roomListsOfCanJoin.hasOwnProperty(kiter67))
      {
        var viter68 = this.roomListsOfCanJoin[kiter67];
        output.writeString(kiter67);
        viter68.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.msgLists !== null && this.msgLists !== undefined) {
    output.writeFieldBegin('msgLists', Thrift.Type.LIST, 21);
    output.writeListBegin(Thrift.Type.STRUCT, this.msgLists.length);
    for (var iter69 in this.msgLists)
    {
      if (this.msgLists.hasOwnProperty(iter69))
      {
        iter69 = this.msgLists[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userListOfSystem !== null && this.userListOfSystem !== undefined) {
    output.writeFieldBegin('userListOfSystem', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.STRING, this.userListOfSystem.length);
    for (var iter70 in this.userListOfSystem)
    {
      if (this.userListOfSystem.hasOwnProperty(iter70))
      {
        iter70 = this.userListOfSystem[iter70];
        output.writeString(iter70);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.systemMessageList !== null && this.systemMessageList !== undefined) {
    output.writeFieldBegin('systemMessageList', Thrift.Type.LIST, 23);
    output.writeListBegin(Thrift.Type.STRUCT, this.systemMessageList.length);
    for (var iter71 in this.systemMessageList)
    {
      if (this.systemMessageList.hasOwnProperty(iter71))
      {
        iter71 = this.systemMessageList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lastRecvTimeOfSystemMessage !== null && this.lastRecvTimeOfSystemMessage !== undefined) {
    output.writeFieldBegin('lastRecvTimeOfSystemMessage', Thrift.Type.STRING, 24);
    output.writeString(this.lastRecvTimeOfSystemMessage);
    output.writeFieldEnd();
  }
  if (this.joinRoomInfos !== null && this.joinRoomInfos !== undefined) {
    output.writeFieldBegin('joinRoomInfos', Thrift.Type.STRUCT, 25);
    this.joinRoomInfos.write(output);
    output.writeFieldEnd();
  }
  if (this.exitRoomInfos !== null && this.exitRoomInfos !== undefined) {
    output.writeFieldBegin('exitRoomInfos', Thrift.Type.STRUCT, 26);
    this.exitRoomInfos.write(output);
    output.writeFieldEnd();
  }
  if (this.addGoldInfos !== null && this.addGoldInfos !== undefined) {
    output.writeFieldBegin('addGoldInfos', Thrift.Type.STRUCT, 27);
    this.addGoldInfos.write(output);
    output.writeFieldEnd();
  }
  if (this.addExpInfos !== null && this.addExpInfos !== undefined) {
    output.writeFieldBegin('addExpInfos', Thrift.Type.STRUCT, 28);
    this.addExpInfos.write(output);
    output.writeFieldEnd();
  }
  if (this.addNoticeInfos !== null && this.addNoticeInfos !== undefined) {
    output.writeFieldBegin('addNoticeInfos', Thrift.Type.STRUCT, 29);
    this.addNoticeInfos.write(output);
    output.writeFieldEnd();
  }
  if (this.dissolveInfos !== null && this.dissolveInfos !== undefined) {
    output.writeFieldBegin('dissolveInfos', Thrift.Type.STRUCT, 30);
    this.dissolveInfos.write(output);
    output.writeFieldEnd();
  }
  if (this.commonSystemMsg !== null && this.commonSystemMsg !== undefined) {
    output.writeFieldBegin('commonSystemMsg', Thrift.Type.STRUCT, 31);
    this.commonSystemMsg.write(output);
    output.writeFieldEnd();
  }
  if (this.kickSystemMsg !== null && this.kickSystemMsg !== undefined) {
    output.writeFieldBegin('kickSystemMsg', Thrift.Type.STRUCT, 32);
    this.kickSystemMsg.write(output);
    output.writeFieldEnd();
  }
  if (this.removeSystemMsg !== null && this.removeSystemMsg !== undefined) {
    output.writeFieldBegin('removeSystemMsg', Thrift.Type.STRUCT, 33);
    this.removeSystemMsg.write(output);
    output.writeFieldEnd();
  }
  if (this.passSystemMsg !== null && this.passSystemMsg !== undefined) {
    output.writeFieldBegin('passSystemMsg', Thrift.Type.STRUCT, 34);
    this.passSystemMsg.write(output);
    output.writeFieldEnd();
  }
  if (this.banSystemMsg !== null && this.banSystemMsg !== undefined) {
    output.writeFieldBegin('banSystemMsg', Thrift.Type.STRUCT, 35);
    this.banSystemMsg.write(output);
    output.writeFieldEnd();
  }
  if (this.unbanSystemMsg !== null && this.unbanSystemMsg !== undefined) {
    output.writeFieldBegin('unbanSystemMsg', Thrift.Type.STRUCT, 36);
    this.unbanSystemMsg.write(output);
    output.writeFieldEnd();
  }
  if (this.editInfoSystemMsg !== null && this.editInfoSystemMsg !== undefined) {
    output.writeFieldBegin('editInfoSystemMsg', Thrift.Type.STRUCT, 37);
    this.editInfoSystemMsg.write(output);
    output.writeFieldEnd();
  }
  if (this.applyJoinSystemMsg !== null && this.applyJoinSystemMsg !== undefined) {
    output.writeFieldBegin('applyJoinSystemMsg', Thrift.Type.STRUCT, 38);
    this.applyJoinSystemMsg.write(output);
    output.writeFieldEnd();
  }
  if (this.deviceSource !== null && this.deviceSource !== undefined) {
    output.writeFieldBegin('deviceSource', Thrift.Type.STRING, 39);
    output.writeString(this.deviceSource);
    output.writeFieldEnd();
  }
  if (this.lossMessageVersion !== null && this.lossMessageVersion !== undefined) {
    output.writeFieldBegin('lossMessageVersion', Thrift.Type.STRING, 40);
    output.writeString(this.lossMessageVersion);
    output.writeFieldEnd();
  }
  if (this.canjoinVersions !== null && this.canjoinVersions !== undefined) {
    output.writeFieldBegin('canjoinVersions', Thrift.Type.MAP, 41);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.canjoinVersions));
    for (var kiter72 in this.canjoinVersions)
    {
      if (this.canjoinVersions.hasOwnProperty(kiter72))
      {
        var viter73 = this.canjoinVersions[kiter72];
        output.writeString(kiter72);
        output.writeI64(viter73);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Protocol.Message.PACKAGE_NORMAL = 0;
Protocol.Message.PACKAGE_PING = 1;
Protocol.Message.PACKAGE_ACK = 2;
Protocol.Message.PACKAGE_MSG_GROUP = 0;
Protocol.Message.PACKAGE_MSG_SYS = 1;
Protocol.Message.PACKAGE_MSG_POINT = 2;
Protocol.Message.PACKAGE_MSG_ON_MESSAGE = 0;
Protocol.Message.PACKAGE_MSG_ON_ISLOGIN = 10001;
Protocol.Message.PACKAGE_MSG_ON_ISLOGIN_RESULT = 10002;
Protocol.Message.PACKAGE_MSG_ON_LOGOUT = 10003;
Protocol.Message.PACKAGE_MSG_ON_LOGOUT_RESULT = 10004;
Protocol.Message.PACKAGE_MSG_ON_MSG_JOINROOM = 10005;
Protocol.Message.PACKAGE_MSG_ON_MSG_JOINROOM_RESULT = 10006;
Protocol.Message.PACKAGE_MSG_ON_MSG_EXITROOM = 10007;
Protocol.Message.PACKAGE_MSG_ON_MSG_EXITROOM_RESULT = 10008;
Protocol.Message.PACKAGE_MSG_ON_MSG_ADDGOLD = 10009;
Protocol.Message.PACKAGE_MSG_ON_MSG_ADDGOLD_RESULT = 10010;
Protocol.Message.PACKAGE_MSG_ON_MSG_ADDEXP = 10011;
Protocol.Message.PACKAGE_MSG_ON_MSG_ADDEXP_RESULT = 10012;
Protocol.Message.PACKAGE_MSG_ON_MSG_ADDNOTICE = 10013;
Protocol.Message.PACKAGE_MSG_ON_MSG_ADDNOTICE_RESULT = 10014;
Protocol.Message.PACKAGE_MSG_ON_MSG_DISSOLVE = 10015;
Protocol.Message.PACKAGE_MSG_ON_MSG_DISSOLVE_RESULT = 10016;
Protocol.Message.PACKAGE_MSG_ON_COMMON_RESULT = 20001;
Protocol.Message.PACKAGE_MSG_ON_KICK_RESULT = 20002;
Protocol.Message.PACKAGE_MSG_ON_REMOVE_RESULT = 20003;
Protocol.Message.PACKAGE_MSG_ON_PASS_RESULT = 20004;
Protocol.Message.PACKAGE_MSG_ON_BAN_RESULT = 20005;
Protocol.Message.PACKAGE_MSG_ON_UNBAN_RESULT = 20006;
Protocol.Message.PACKAGE_MSG_ON_EDITINFO_RESULT = 20007;
Protocol.Message.PACKAGE_MSG_ON_APPLYJOIN_RESULT = 20008;
Protocol.Message.PACKAGE_MSG_ON_GETLOSSMESSAGE = 20009;
Protocol.Message.PACKAGE_MSG_ON_GETLOSSMESSAGE_RESULT = 20010;
Protocol.Message.PACKAGE_MSG_CONTENT_TEXT = 0;
Protocol.Message.PACKAGE_MSG_CONTENT_PICTRUE = 1;
Protocol.Message.PACKAGE_MSG_CONTENT_AUDIO = 2;
Protocol.Message.PACKAGE_MSG_CONTENT_SENDQUESTION = 3;
Protocol.Message.ROOM_NO_CHANGE = 0;
Protocol.Message.ROOM_NEW_JOIN = 1;
Protocol.Message.ROOM_UPDATE = 2;
Protocol.Message.ROOM_NOT_EXISTS = 3;
